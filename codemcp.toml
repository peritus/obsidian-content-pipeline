prompt = """
You are an expert software developer.

Development instructions:
- ...

Commit messages:
- Write a commit message in imperative mood (e.g., "Refactor X", not "Refactored X").
- Do not describe success or effort (e.g., avoid "Successfully", "Cleaned up", etc.).
- Just state what the commit does, not how well or completely it does it.
"""

paths_blocked = [
    # Version control internals (major space wasters)
    ".jj/**",
    ".git/**",

    # Node modules
    "node_modules/**",
]


[commands]
# Standard build commands
build = ["npm", "run", "build"]
build_debug = ["npm", "run", "build:debug"]
npm_install = ["npm", "install"]

# ===== TESTS =====

# Quick test status - minimal output, failures only
test_status = ["npm", "test", "--", "--silent"]

# All tests with failures-only output (most common use case)
test_failures_only = ["npm", "test", "--", "--silent", "--onlyFailures"]

# Test specific files
test_file = { cmd = ["npm", "test", "--"], files = ["tests/**/*.test.ts", "tests/**/*.spec.ts", "**/*.test.ts", "**/*.spec.ts"] }

# ===== TYPESCRIPT =====

# Type checking for quick validation
type_check = ["npm", "run", "type-check"]

# Type check specific files
type_check_file = { cmd = ["npx", "tsc", "--noEmit"], files = ["src/**/*.ts", "src/**/*.tsx", "tests/**/*.ts", "*.ts"] }

# ===== LINT =====

lint = ["npm", "run", "lint"]
lint_fix = ["npm", "run", "lint:fix"]

# Lint specific files
lint_file = { cmd = ["npx", "eslint"], files = ["src/**/*.ts", "src/**/*.tsx", "tests/**/*.ts", "*.ts", "*.tsx"] }

# Lint and fix specific files
lint_fix_file = { cmd = ["npx", "eslint", "--fix"], files = ["src/**/*.ts", "src/**/*.tsx", "tests/**/*.ts", "*.ts", "*.tsx"] }
